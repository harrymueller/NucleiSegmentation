binsize = 30
BINSIZE = binsize
rm(binsize)
DIAMETER = 25
RESOLUTION = 0.3
other required variables
METHOD_NAME = ifelse(METHOD == "SCT", "SCTransform", "NormalizeData")
ASSAY_TO_USE = ifelse(METHOD == "SCT", "SCT", "Spatial")
FOLDER_NAME = sprintf("%s_bin%s_subset%s_res%s", TONGUE_ID, BINSIZE, DIAMETER, RESOLUTION)
FILENAME = paste0(FOLDER_NAME, ".rds")
INPUT = paste0(DIR, "/umap_clusters/", METHOD_NAME, "/RDS/", FILENAME)
# output dir
OUTPUT_DIR = sprintf("%s/cell_annotations/%s/%s", DIR, METHOD_NAME, FOLDER_NAME)
if (!dir.exists(OUTPUT_DIR)) dir.create(OUTPUT_DIR)
print("############################################################")
print(paste0("Starting ", FOLDER_NAME, "..."))
print("############################################################")
# ref data
RefData = celldex::MouseRNAseqData()
##############################
# START
##############################
# read file
obj = readRDS(INPUT)
##############################
# FUNCTIONS
##############################
# plot umaps and spatial dimensions of both cell annotations and clusters in a 2x2 grid
dim_plots <- function(obj, ident, filename) {
temp_filename = stringr::str_replace_all(filename, ".png", ".TEMP.png")
Idents(obj) = ident
p1 <- DimPlot(obj, reduction = "umap", label = F, pt.size = 0.5) + theme(legend.position = "none")
p2 <- SpatialDimPlot(obj)
accurate_plot(
p2$data,
filename = filename,
legend_name = paste0("Cell Annotations\n", FOLDER_NAME), # stringr::str_replace_all(FOLDER_NAME, "_", "\n")),
left_plot = p1,
dpi = 400,
minres = 1000,
legend_space = 4
)
Idents(obj) = "seurat_clusters"
p1 <- DimPlot(obj, reduction = "umap", label = F, pt.size = 0.5) + theme(legend.position = "none")
p2 <- SpatialDimPlot(obj)
accurate_plot(
p2$data,
filename = temp_filename,
legend_name = "Seurat Clusters",
left_plot = p1,
dpi = 400,
minres = 1000,
legend_space = 4
)
system(sprintf("convert %s %s -append %s", filename, temp_filename, filename))
system(paste("rm", temp_filename))
}
bUseMainLabels = F
bByClusters = F
print(sprintf("Annotating using singleR (%s %s)...", bUseMainLabels, bByClusters))
if (bUseMainLabels) {
labels = RefData$label.main
} else {
labels = RefData$label.fine
}
# ensure ident is seurat clusters
Idents(obj) = "seurat_clusters"
# ensure log-normalised counts
if (bByClusters) {
pred = SingleR(test = obj@assays[[ASSAY_TO_USE]]@data,
ref = RefData,
labels = labels,
clusters = Idents(obj))
} else {
pred = SingleR(test = obj@assays[[ASSAY_TO_USE]]@data,
ref = RefData,
labels = labels)
}
# heatmap
p = plotScoreHeatmap(pred)
ggsave(p, width = 11, height =7 , dpi =200)
saveRDS(pred, "temp.rds")
ggsave(p, width = 11, height =7 , dpi =200)
p
ggsave("temp.png", p, width = 11, height =7 , dpi =200)
ggsave("temp.png", p, width = 10.5, height =7 , dpi =200)
ggsave("temp.png", p, width = 12, height =7 , dpi =200)
?scibet::Marker_heatmap
BINSIZE = 100
DIAMETER = 0
RESOLUTION = 0.5
METHOD_NAME = ifelse(METHOD == "SCT", "SCTransform", "NormalizeData")
ASSAY_TO_USE = ifelse(METHOD == "SCT", "SCT", "Spatial")
FOLDER_NAME = sprintf("%s_bin%s_subset%s_res%s", TONGUE_ID, BINSIZE, DIAMETER, RESOLUTION)
FILENAME = paste0(FOLDER_NAME, ".rds")
INPUT = paste0(DIR, "/umap_clusters/", METHOD_NAME, "/RDS/", FILENAME)
# output dir
OUTPUT_DIR = sprintf("%s/cell_annotations/%s/%s", DIR, METHOD_NAME, FOLDER_NAME)
if (!dir.exists(OUTPUT_DIR)) dir.create(OUTPUT_DIR)
##############################
# START
##############################
# read file
obj = readRDS(INPUT)
print(sprintf("Annotating using SciBet (%s)...", bUseMainLabels))
# create the training set for the celldex ref
train = as.data.frame(RefData@assays@data)
train[[1]] = NULL
train[[1]] = NULL
# which ref labels to use, and what to call the metadata
if (bUseMainLabels) {
refLabels = RefData$label.main
labelName = "scibet_main"
} else {
refLabels = RefData$label.fine
labelName = "scibet_fine"
}
# add labels to training set
train = rbind(train, as.integer(as.factor(refLabels)))
rownames(train)[length(rownames(train))] = "label"
# train and test sets
train = as.data.frame(t(train))
test = as.data.frame(t(as.matrix(obj@assays[[ASSAY_TO_USE]]@data)))
# annotate cells
pred = SciBet_R(train, test)
obj@meta.data[[labelName]] = pred
labels = levels(factor(refLabels))
for (i in seq(length(labels))) {
obj@meta.data[[labelName]][obj@meta.data[[labelName]] == i] = labels[i]
}
# add labels to test dataset
test = cbind(test, obj@meta.data[[labelName]])
colnames(test)[length(colnames(test))] = "label"
# find top 50 genes (as determined by SciBet fn), then do a dotplot
genes = SelectGene_R(test, k = 50)
p = scibet::Marker_heatmap(test, genes) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER))))
p
p + geom_point(size = 2)
p = scibet::Marker_heatmap(test, genes, dot.scale = 1) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER))))
ggsave("temp.png", p, width = 11, height = 7)
ggsave("temp.png", p, width = 11, height = 7, dpi = 400)
ggsave("temp.png", p, width = 11, height = 7, dpi = 600)
ggsave("temp.png", p, width = 14, height = 10, dpi = 200)
ggsave("temp.png", p, width = 16, height = 10, dpi = 200)
p = p + theme(text = element_text(size = 20))
ggsave("temp.png", p, width = 16, height = 10, dpi = 200)
p = p + theme(text = element_text(size = 30))
ggsave("temp.png", p, width = 16, height = 10, dpi = 200)
p = p + theme(text = element_text(size = 24), axis.text = element_text(size = 20), legend.text = element_text(size = 20))
ggsave("temp.png", p, width = 16, height = 10, dpi = 200)
ggsave("temp.png", p, width = 16, height = 10, dpi = 250)
ggsave("temp.png", p, width = 18, height = 10, dpi = 200)
p = p + theme(text = element_text(size = 24), axis.text = element_text(size = 20), legend.text = element_text(size = 20), axis.text.x = element_text(vjust = 0.5))
p
ggsave("temp.png", p, width = 18, height = 10, dpi = 200)
ggsave("temp.png", p, width = 20, height = 10, dpi = 200)
?SelectGene_R
# find top 50 genes (as determined by SciBet fn), then do a dotplot
genes = SelectGene_R(train, k = 50)
p = scibet::Marker_heatmap(test, genes, dot.scale = 1) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER)))) +
theme(text = element_text(size = 24),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(vjust = 0.5))
p = scibet::Marker_heatmap(test, genes) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER)))) +
theme(text = element_text(size = 24),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(vjust = 0.5))
# find top 50 genes (as determined by SciBet fn), then do a dotplot
genes = SelectGene_R(test, k = 50)
p = scibet::Marker_heatmap(test, genes) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER)))) +
theme(text = element_text(size = 24),
axis.text = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(vjust = 0.5))
ggsave("temp.png", p, width = 20, height = 12, dpi = 200)
p = scibet::Marker_heatmap(test, genes) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER)))) +
theme(text = element_text(size = 24),
axis.text = element_text(size = 20),
legend.text = element_text(size = 30),
axis.text.x = element_text(vjust = 0.5))
ggsave("temp.png", p, width = 20, height = 12, dpi = 200)
p = scibet::Marker_heatmap(test, genes) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER)))) +
theme(text = element_text(size = 24),
axis.text = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.text.x = element_text(vjust = 0.5))
ggsave("temp.png", p, width = 20, height = 12, dpi = 200)
p = scibet::Marker_heatmap(test, genes) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER)))) +
theme(text = element_text(size = 26),
axis.text.y = element_text(size = 24),
axis.text.x = element_text(vjust = 0.5, size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18))
ggsave("temp.png", p, width = 20, height = 12, dpi = 200)
p = scibet::Marker_heatmap(test, genes) +
ggtitle(sprintf("Dot plot of 3 markers genes from each cluster\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER)))) +
theme(text = element_text(size = 26),
axis.text.y = element_text(size = 24),
axis.text.x = element_text(vjust = 0.5, size = 20),
legend.title = element_text(size = 24),
legend.text = element_text(size = 20))
ggsave("temp.png", p, width = 20, height = 12, dpi = 200)
p = scibet::Marker_heatmap(test, genes) +
ggtitle(sprintf("Dot plot of 50 \"informative\" training genes\n%s_bin%s%s",
TONGUE_ID, BINSIZE,
ifelse(DIAMETER == 0, "", paste0("_subset",DIAMETER)))) +
theme(text = element_text(size = 26),
axis.text.y = element_text(size = 24),
axis.text.x = element_text(vjust = 0.5, size = 20),
legend.title = element_text(size = 24),
legend.text = element_text(size = 20))
ggsave("temp.png", p, width = 20, height = 12, dpi = 200)
genes
genes = c()
train[["labels"]]
train[["label"]]
ceiling
k = ceiling(50 / length(unique(train[["label"]])))
for (lab in unique(train[["label"]])) {
genes = c(genes, SelectGene_R(train, k = k))
}
dim(train)
dim(train[,train[["label"]] == lab])
dim(train[,train[["label"]] == 2])
genes = c()
k = ceiling(50 / length(unique(train[["label"]])))
for (lab in unique(train[["label"]])) {
genes = c(genes, SelectGene_R(train[,train[["label"]] == lab], k = k))
}
dim(train[train[["label"]] == 2])
dim(train[train[["label"]] == 2,])
dim(train[train[["label"]] == 3,])
genes = c()
for (lab in unique(train[["label"]])) {
genes = c(genes, SelectGene_R(train[train[["label"]] == lab,], k = k))
}
train[train[["label"]] == lab,]
train[train[["label"]] == lab,12]
dim(train[train[["label"]] == lab,])
(train[train[["label"]] == lab,21215])
lab
SelectGene_R(train[train[["label"]] == lab,], k = k)
subset = train[train[["label"]] == lab,]
subset$label
SelectGene_R(subset, k = 10)
dim(subset)
subset$label[13] = 2
SelectGene_R(subset, k = 10)
obj@meta.data
names(obj@meta.data)
obj@meta.data[["scibet_main"]] = obj@meta.data$scibet_fine
obj@meta.data[["singleR_main_clusters"]] = obj@meta.data$scibet_fine
obj@meta.data[["singleR_main_cells"]] = obj@meta.data$scibet_fine
obj@meta.data[["singleR_fine_cells"]] = obj@meta.data$scibet_fine
obj@meta.data[["singleR_fine_clusters"]] = obj@meta.data$scibet_fine
print("Saving annotations...")
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
fine = ct_xtabs_df(obj, "singleR_fine_cells")
fine = merge.data.frame(fine, ct_xtabs_df(obj, "singleR_fine_clusters"), all = T)
fine = merge.data.frame(fine, ct_xtabs_df(obj, "scibet_fine"), all = T)
# save to file
wb <- createWorkbook()
s = createSheet(wb, "Cell Annotations")
# main labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'main' labels")),
s, col.names = F, row.names = F)
addDataFrame(t(main), s, col.names = F, row.names = T, startRow = 2)
# fine labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'fine' labels")),
s, col.names = F, row.names = F, startRow = 7)
addDataFrame(t(fine), s, col.names = F, row.names = T, startRow = 8)
saveWorkbook(wb, "temp.xlsx")
# produce a df of the counts of cts
ct_xtabs_df <- function(obj, col) {
df = data.frame(xtabs(~obj@meta.data[[col]]))
names(df) = c("Cell Type", col)
df[["Cell Type"]] = unfactor(df[["Cell Type"]])
return(df)
}
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
fine = ct_xtabs_df(obj, "singleR_fine_cells")
fine = merge.data.frame(fine, ct_xtabs_df(obj, "singleR_fine_clusters"), all = T)
fine = merge.data.frame(fine, ct_xtabs_df(obj, "scibet_fine"), all = T)
# save to file
wb <- createWorkbook()
s = createSheet(wb, "Cell Annotations")
# main labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'main' labels")),
s, col.names = F, row.names = F)
addDataFrame(t(main), s, col.names = F, row.names = T, startRow = 2)
# fine labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'fine' labels")),
s, col.names = F, row.names = F, startRow = 7)
addDataFrame(t(fine), s, col.names = F, row.names = T, startRow = 8)
saveWorkbook(wb, "temp.xlsx")
df
col = "scibet_main"
df = data.frame(xtabs(~obj@meta.data[[col]]))
names(df) = c("Cell Type", col)
df[["Cell Type"]] = unfactor(df[["Cell Type"]])
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
fine = ct_xtabs_df(obj, "singleR_fine_cells")
fine = merge.data.frame(fine, ct_xtabs_df(obj, "singleR_fine_clusters"), all = T)
fine = merge.data.frame(fine, ct_xtabs_df(obj, "scibet_fine"), all = T)
# save to file
wb <- createWorkbook()
s = createSheet(wb, "Cell Annotations")
?addDataFrame
x = t(main)
x = as.data.frame(x)
colnames(df)
rownames(df)
print("Saving annotations...")
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
fine = ct_xtabs_df(obj, "singleR_fine_cells")
fine = merge.data.frame(fine, ct_xtabs_df(obj, "singleR_fine_clusters"), all = T)
fine = merge.data.frame(fine, ct_xtabs_df(obj, "scibet_fine"), all = T)
# save to file
wb <- createWorkbook()
s = createSheet(wb, "Cell Annotations")
# main labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'main' labels")),
s, col.names = F, row.names = F)
addDataFrame(t(main), s, col.names = T, row.names = T, startRow = 2)
# fine labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'fine' labels")),
s, col.names = F, row.names = F, startRow = 7)
addDataFrame(t(fine), s, col.names = T, row.names = T, startRow = 9)
saveWorkbook(wb, "temp.xlsx")
# produce a df of the counts of cts
ct_xtabs_df <- function(obj, col) {
df = data.frame(xtabs(~obj@meta.data[[col]]))
names(df) = c("Cell Type", col)
rownames(df) = df[["Cell Type"]]
df[["Cell Type"]] = NULL
#df[["Cell Type"]] = unfactor(df[["Cell Type"]])
return(df)
}
print("Saving annotations...")
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
fine = ct_xtabs_df(obj, "singleR_fine_cells")
fine = merge.data.frame(fine, ct_xtabs_df(obj, "singleR_fine_clusters"), all = T)
fine = merge.data.frame(fine, ct_xtabs_df(obj, "scibet_fine"), all = T)
# save to file
wb <- createWorkbook()
s = createSheet(wb, "Cell Annotations")
# main labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'main' labels")),
s, col.names = F, row.names = F)
addDataFrame(t(main), s, col.names = T, row.names = T, startRow = 2)
# fine labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'fine' labels")),
s, col.names = F, row.names = F, startRow = 7)
addDataFrame(t(fine), s, col.names = T, row.names = T, startRow = 9)
saveWorkbook(wb, "temp.xlsx")
#saveWorkbook(wb, f_name)
df
df = data.frame(xtabs(~obj@meta.data[[col]]))
names(df) = c("Cell Type", col)
rownames(df) = df[["Cell Type"]]
df[["Cell Type"]] = NULL
df
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
df
main
#rownames(df) = df[["Cell Type"]]
#df[["Cell Type"]] = NULL
df[["Cell Type"]] = unfactor(df[["Cell Type"]])
# produce a df of the counts of cts
ct_xtabs_df <- function(obj, col) {
df = data.frame(xtabs(~obj@meta.data[[col]]))
names(df) = c("Cell Type", col)
#rownames(df) = df[["Cell Type"]]
#df[["Cell Type"]] = NULL
df[["Cell Type"]] = unfactor(df[["Cell Type"]])
return(df)
}
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
rownames(main) = main[["Cell Type"]]
main
rownames(main) = main[["Cell Type"]]
main[["Cell Type"]] = NULL
wb <- createWorkbook()
s = createSheet(wb, "Cell Annotations")
# main labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'main' labels")),
s, col.names = F, row.names = F)
addDataFrame(t(main), s, col.names = T, row.names = T, startRow = 2)
# fine labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'fine' labels")),
s, col.names = F, row.names = F, startRow = 7)
addDataFrame(t(fine), s, col.names = T, row.names = T, startRow = 9)
saveWorkbook(wb, "temp.xlsx")
#saveWorkbook(wb, f_name)
View(main)
# save the xtabs of all annotations to a xlsx file
save_annotations <- function(obj, f_name) {
print("Saving annotations...")
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
rownames(main) = main[["Cell Type"]]
main[["Cell Type"]] = NULL
fine = ct_xtabs_df(obj, "singleR_fine_cells")
fine = merge.data.frame(fine, ct_xtabs_df(obj, "singleR_fine_clusters"), all = T)
fine = merge.data.frame(fine, ct_xtabs_df(obj, "scibet_fine"), all = T)
rownames(fine) = fine[["Cell Type"]]
fine[["Cell Type"]] = NULL
# save to file
wb <- createWorkbook()
s = createSheet(wb, "Cell Annotations")
# main labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'main' labels")),
s, col.names = F, row.names = F)
addDataFrame(t(main), s, col.names = T, row.names = T, startRow = 2)
# fine labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'fine' labels")),
s, col.names = F, row.names = F, startRow = 7)
addDataFrame(t(fine), s, col.names = T, row.names = T, startRow = 8)
saveWorkbook(wb, "temp.xlsx")
#saveWorkbook(wb, f_name)
}
print("Saving annotations...")
main = ct_xtabs_df(obj, "singleR_main_cells")
main = merge.data.frame(main, ct_xtabs_df(obj, "singleR_main_clusters"), all = T)
main = merge.data.frame(main, ct_xtabs_df(obj, "scibet_main"), all = T)
rownames(main) = main[["Cell Type"]]
main[["Cell Type"]] = NULL
fine = ct_xtabs_df(obj, "singleR_fine_cells")
fine = merge.data.frame(fine, ct_xtabs_df(obj, "singleR_fine_clusters"), all = T)
fine = merge.data.frame(fine, ct_xtabs_df(obj, "scibet_fine"), all = T)
rownames(fine) = fine[["Cell Type"]]
fine[["Cell Type"]] = NULL
# save to file
wb <- createWorkbook()
s = createSheet(wb, "Cell Annotations")
# main labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'main' labels")),
s, col.names = F, row.names = F)
addDataFrame(t(main), s, col.names = T, row.names = T, startRow = 2)
# fine labels
addDataFrame(data.frame(paste0("Cell annotations of ", FOLDER_NAME, ", using celldex::MouseRNAseqData() 'fine' labels")),
s, col.names = F, row.names = F, startRow = 7)
addDataFrame(t(fine), s, col.names = T, row.names = T, startRow = 8)
saveWorkbook(wb, "temp.xlsx")
q()
rm(list=ls())
q()
DIR = "/mnt/data/R_analysis/giotto"
PAGE_FILE = paste0(DIR, "/page_enrichment.Rds")
page = readRDS(PAGE_FILE)
# ranking
ranked_page = page
for (i in seq(2, 16)) {
ranked_page[[i]] = order(order(page[[i]], decreasing = TRUE))
}
# minimise - ie find highest rank
page$ranks = apply(ranked_page[,2:16],1,which.min)
page$ranks = factor(page$ranks, labels = names(page[,2:16]))
page$max = factor(apply(page[,2:16],1,which.max), labels = names(page[,2:16]))
# normalised
norm_page = page
for (i in seq(2, 16)) {
norm_page[[i]] = (norm_page[[i]] - mean(norm_page[[i]])) / sd(norm_page[[i]])
}
page$norm = factor(apply(norm_page[,2:16],1,which.max), labels = names(page[,2:16]))
reticulate::repl_python()
print("3")
no
